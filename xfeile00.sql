/*
*   VUT FIT 2021/2022 - IDS
*   IDS Projekt : pokročilé SQL operace
*   Zadání #19: "Přihlašování na projekty"
*
*   Autor: Marcel Feiler [xfeile00]
*
*
*   https://oracle.readthedocs.io/en/latest/sql/basics/style-guide.html
*/
---------------------------------------------------------------------------
--                     nastavení proměnných prostředí                    --
---------------------------------------------------------------------------

SET SERVEROUTPUT ON;



---------------------------------------------------------------------------
--  Dropování všech tabulek v případě, že už nějaké v databázi existují  --
---------------------------------------------------------------------------

DROP TABLE predmet_student;
DROP TABLE predmet_ucitel;
DROP TABLE bodove_hodnoceni;
DROP TABLE uzivatel;
DROP TABLE tym;
DROP TABLE tema;
DROP TABLE projekt;
DROP TABLE ucitel;
DROP TABLE student;
DROP TABLE predmet;

DROP INDEX xlogin_index;

-- následující spouští username2:
DROP MATERIALIZED VIEW pouze_iff_mat_view;


--------------------------------------------------------------
--    Vytvareni vsech potrebnych tabulek a jejich sloupcu   --
--------------------------------------------------------------

CREATE TABLE predmet
(
  id_predmetu CHAR(3) PRIMARY KEY,
  nazev VARCHAR2(512) NOT NULL,
  popis VARCHAR2(512) DEFAULT NULL,
  typ CHAR(3) NOT NULL, -- bak. / mag. studium
  pocet_kred INT NOT NULL
);

CREATE TABLE student
(
  xlogin CHAR(8) PRIMARY KEY 
    CHECK(REGEXP_LIKE
    (
			xlogin, '^x[a-z]{5}[0-9]{2}$', 'c'
		)),
  studijni_progr CHAR(3) NOT NULL
);

CREATE TABLE ucitel
(
  ulogin CHAR(8) PRIMARY KEY
    CHECK(REGEXP_LIKE
    (
			ulogin, '^u[a-z]{5}[0-9]{2}$', 'c'
		)) 
);

CREATE TABLE projekt
(
  id_projektu INT GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
  odevzdani_od TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
  odevzdani_do TIMESTAMP NOT NULL,
  popis VARCHAR2(512) DEFAULT NULL,
  max_velikost_tymu INT NOT NULL,
  id_predmetu_fk CHAR(3) NOT NULL,
  ulogin_fk CHAR(8) NOT NULL,
  CONSTRAINT id_projekt_predmet_fk
          FOREIGN KEY (id_predmetu_fk) REFERENCES predmet (id_predmetu)
          ON DELETE CASCADE,

  CONSTRAINT id_projekt_student_fk
          FOREIGN KEY (ulogin_fk) REFERENCES ucitel (ulogin)
          ON DELETE SET NULL
);


CREATE TABLE tema
(
  id_tematu INT GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
  nazev VARCHAR2(128) NOT NULL,
  popis VARCHAR2(512) DEFAULT NULL,
  max_pocet_tymu INT DEFAULT NULL,
  id_projektu_fk INT NOT NULL,
  ulogin_fk CHAR(8) NOT NULL,

  CONSTRAINT tema_projekt_fk
        FOREIGN KEY (id_projektu_fk) REFERENCES projekt (id_projektu)
        ON DELETE CASCADE,

  CONSTRAINT zadavajici_ucitel_fk 
        FOREIGN KEY (ulogin_fk) REFERENCES ucitel (ulogin)
        ON DELETE CASCADE
);

CREATE TABLE tym
(
  id_tymu INT GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
  nazev VARCHAR2(32) NOT NULL,
  poc_clenu INT DEFAULT NULL,
  xlogin_fk CHAR(8) NOT NULL,
  xlogin_kap_fk CHAR(8) NOT NULL,
  prihlasene_tema_fk INT DEFAULT NULL,
CONSTRAINT tym_student_fk
        FOREIGN KEY (xlogin_fk) REFERENCES student (xlogin)
        ON DELETE SET NULL,
        
CONSTRAINT tym_kapitan_fk
        FOREIGN KEY (xlogin_kap_fk) REFERENCES student (xlogin)
        ON DELETE CASCADE,

CONSTRAINT tym_tema_fk
        FOREIGN KEY (prihlasene_tema_fk) REFERENCES tema (id_tematu)
        ON DELETE SET NULL
);

CREATE TABLE uzivatel
(
  id INT GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
  jmeno VARCHAR(128) NOT NULL,
  prijmeni VARCHAR(128) NOT NULL,
  email VARCHAR(128) NOT NULL
        CHECK(REGEXP_LIKE
        (
          email, '^[ux][a-z]{5}[0-9]{2}@uni.edu$', 'c'
        )),
  student_id CHAR(8) DEFAULT NULL,
  ucitel_id CHAR(8) DEFAULT NULL,
  CONSTRAINT uzivatel_student_id_fk
		FOREIGN KEY (student_id) REFERENCES student (xlogin)
		ON DELETE SET NULL,

  CONSTRAINT uzivatel_ucitel_id_fk
		FOREIGN KEY (ucitel_id) REFERENCES ucitel (ulogin)
		ON DELETE SET NULL
);

CREATE TABLE bodove_hodnoceni
(
  id_bodove_hodnoceni INT GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
  pocet_bodu INT DEFAULT NULL,
  xlogin_fk CHAR(8) NOT NULL,
  ulogin_fk CHAR(8) NOT NULL,
  id_projektu_fk INT NOT NULL,

  CONSTRAINT bodove_hodnoceni_student_fk
        FOREIGN KEY (xlogin_fk) REFERENCES student (xlogin)
        ON DELETE CASCADE,

  CONSTRAINT bodove_hodnoceni_ucitel_fk
        FOREIGN KEY (ulogin_fk) REFERENCES ucitel (ulogin)
        ON DELETE CASCADE,

  CONSTRAINT bodove_hodnoceni_projekt_fk
        FOREIGN KEY (id_projektu_fk) REFERENCES projekt (id_projektu)
        ON DELETE SET NULL
);

CREATE TABLE predmet_ucitel
(
  id_predm_ucit  INT GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
  id_predmetu_fk CHAR(3) NOT NULL,
  ulogin_fk CHAR(8) NOT NULL,

  CONSTRAINT predmet_ucitel_id_fk
    FOREIGN KEY (id_predmetu_fk) REFERENCES predmet (id_predmetu)
    ON DELETE CASCADE,
  CONSTRAINT ucitel_id_fk
    FOREIGN KEY (ulogin_fk) REFERENCES ucitel (ulogin)
    ON DELETE CASCADE

);

CREATE TABLE predmet_student
(
  id_predm_stud  INT GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
  id_predmetu_fk CHAR(3) NOT NULL,
  xlogin_fk CHAR(8) NOT NULL,

  CONSTRAINT predmet_student_id_fk
    FOREIGN KEY (id_predmetu_fk) REFERENCES predmet (id_predmetu)
    ON DELETE CASCADE,

  CONSTRAINT student_id_fk
    FOREIGN KEY (xlogin_fk) REFERENCES student (xlogin)
    ON DELETE CASCADE
);

-- vkladani ukazkovych / testovacich hodnot do tabulek

INSERT INTO student (xlogin, studijni_progr)
VALUES ('xnovak00', 'BIT');
INSERT INTO student (xlogin, studijni_progr)
VALUES ('xmarti00', 'BIT');
INSERT INTO student (xlogin, studijni_progr)
VALUES ('xtoast00', 'MIT'); 

INSERT INTO ucitel (ulogin)
VALUES ('uvorac00');
INSERT INTO ucitel (ulogin)
VALUES ('ukrena00');

INSERT INTO uzivatel (jmeno, prijmeni, email, student_id)
VALUES ('Jindřich', 'Novák', 'xnovak00@uni.edu', 'xnovak00');
INSERT INTO uzivatel (jmeno, prijmeni, email, student_id)
VALUES ('Filip', 'Martínek', 'xmarti00@uni.edu', 'xmarti00');
INSERT INTO uzivatel (jmeno, prijmeni, email, student_id)
VALUES ('Matthew', 'Toast', 'xtoast01@uni.edu', 'xtoast00');
INSERT INTO uzivatel (jmeno, prijmeni, email, ucitel_id)
VALUES ('Jakub', 'Voráček', 'uvorac00@uni.edu', 'uvorac00');
INSERT INTO uzivatel (jmeno, prijmeni, email, ucitel_id)
VALUES ('Jaromír', 'Křena', 'ukrena00@uni.edu', 'ukrena00');



INSERT INTO predmet (id_predmetu, nazev, typ, pocet_kred)
VALUES ('IZP', 'Základy Programování', 'BIT', 5);
INSERT INTO predmet (id_predmetu, nazev, typ, pocet_kred)
VALUES ('IFF', 'Pokročilé Formální Jazyky', 'MIT', 4);

INSERT INTO projekt (odevzdani_do, popis, max_velikost_tymu, id_predmetu_fk, ulogin_fk)
VALUES (TO_TIMESTAMP('2022-04-22 00:00:00', 'YYYY-MM-DD HH24:MI:SS'),
  'Druhý projekt do předmětu IFF, ve kterém si procvičíte práci s XYZ.', 
  4, 
  'IFF', 
  'ukrena00'
);
INSERT INTO projekt (odevzdani_do, popis, max_velikost_tymu, id_predmetu_fk, ulogin_fk)
VALUES (TO_TIMESTAMP('2022-05-02 00:00:00', 'YYYY-MM-DD HH24:MI:SS'), 
  'Druhý projekt do předmětu IZP, který se bude týkat XYQ.',
  3,
  'IZP',
  'ukrena00'
);



INSERT INTO tema (nazev, popis, max_pocet_tymu, id_projektu_fk, ulogin_fk)
VALUES ('Formalne prekladace tema 1', 'Lorem Ipsum pri projekte 2 IFF', 10, 1, 'ukrena00');
INSERT INTO tema (nazev, popis, max_pocet_tymu, id_projektu_fk, ulogin_fk)
VALUES ('Formalne prekladace tema 2', 'Lorem Ipsum pri projekte 2 IFF', 50, 2, 'ukrena00');
INSERT INTO tema (nazev, popis, max_pocet_tymu, id_projektu_fk, ulogin_fk)
VALUES ('Tabulkový editor', 'Vytvoře v týmu tabulkový CLI editor pro základní úpravy',
120, 2, 'ukrena00');



INSERT INTO bodove_hodnoceni (pocet_bodu, xlogin_fk, ulogin_fk, id_projektu_fk)
VALUES ('10', 'xnovak00', 'ukrena00', 1);
INSERT INTO bodove_hodnoceni (pocet_bodu, xlogin_fk, ulogin_fk, id_projektu_fk)
VALUES ('0', 'xtoast00', 'ukrena00', 2);
INSERT INTO bodove_hodnoceni (pocet_bodu, xlogin_fk, ulogin_fk, id_projektu_fk) 
VALUES ('1', 'xmarti00', 'ukrena00', 1);
INSERT INTO bodove_hodnoceni (pocet_bodu, xlogin_fk, ulogin_fk, id_projektu_fk) 
VALUES ('20', 'xnovak00', 'ukrena00', 2);

INSERT INTO tym (nazev,  xlogin_fk, xlogin_kap_fk, prihlasene_tema_fk)
VALUES ('Neutrons', 'xnovak00', 'xnovak00', 3);
INSERT INTO tym (nazev,  xlogin_fk, xlogin_kap_fk, prihlasene_tema_fk)
VALUES ('Neutrons', 'xmarti00', 'xnovak00', 3);
INSERT INTO tym (nazev, poc_clenu, xlogin_fk, xlogin_kap_fk, prihlasene_tema_fk)
VALUES ('Toasters', 1, 'xtoast00', 'xtoast00', 1);

INSERT INTO predmet_ucitel (id_predmetu_fk, ulogin_fk)
VALUES ('IZP', 'ukrena00');
INSERT INTO predmet_ucitel (id_predmetu_fk, ulogin_fk)
VALUES ('IFF', 'ukrena00');

INSERT INTO predmet_student(id_predmetu_fk, xlogin_fk)
VALUES('IZP', 'xnovak00');
INSERT INTO predmet_student(id_predmetu_fk, xlogin_fk)
VALUES('IZP', 'xmarti00');

--------------------------------------------------------------
--               Pokročilé databázové dotazy                --
--------------------------------------------------------------



---------------          triggery            -----------------

-- #1 -- Kontroluje správné datum odevzdání nově přidaného projektu
CREATE OR REPLACE TRIGGER projekt_datum_trigger
	BEFORE INSERT ON projekt
  REFERENCING NEW AS novy
	FOR EACH ROW
  BEGIN
    IF :novy.odevzdani_do < CURRENT_DATE() THEN
      RAISE_APPLICATION_ERROR( -20001, 'Datum odevzdani nesmi byt v minulosti.' );
    END IF;
  END;

-- (POZN.: následující kód je zakomentovaný, aby nedělal nepořádek při spouštění celého skriptu, protože spustí exception)
-- ukazka triggeru: (trigger by měl v tomto případě vyhodit exception, protože vkládaný termín odevzdání je v roce 1999)


-- INSERT INTO projekt (odevzdani_do, popis, max_velikost_tymu, id_predmetu_fk, ulogin_fk)
-- VALUES (TO_TIMESTAMP('1999-05-02 00:00:00', 'YYYY-MM-DD HH24:MI:SS'), 
--   'Další projekt do předmětu IZP, který se bude zabývat ABC.',
--   5,
--   'IZP',
--   'ukrena00'
-- );


-- #2 --- Po vlozeni poctu kreditov vypise neaktualny, aktualny pocet kreditov za predmet a rozdiel medzi nimi.
CREATE OR REPLACE TRIGGER pocet_kreditov_zmena
AFTER UPDATE ON predmet
FOR EACH ROW
WHEN (NEW.pocet_kred > 0)
DECLARE
    pocet NUMBER;
BEGIN
    pocet := 0;
    pocet := :NEW.pocet_kred - :OLD.pocet_kred;
    DBMS_OUTPUT.put_line('Pocet kreditov predtym:' || :OLD.pocet_kred);
    DBMS_OUTPUT.PUT_LINE('Pocet kreditov teraz:' || :NEW.pocet_kred);
    DBMS_OUTPUT.PUT_LINE('Rozdiel v pocte kreditov:' || pocet);
END;
/

-- ukazka triggeru:
UPDATE predmet
SET pocet_kred=10
WHERE id_predmetu = 'IZP';


---------------          procedury            ----------------


-- #1 --- 
-- Procedúra počíta a vypíše celkový počet týmov, projektov a uživateľov
CREATE OR REPLACE PROCEDURE pocet_tym_projekt_uzivatel
AS
  pocet_tym NUMBER;
  pocet_projekt NUMBER;
  pocet_uzivatel NUMBER;
  jmeno_uziv uzivatel.jmeno%TYPE;
  CURSOR uzivatel_cursor IS SELECT jmeno FROM uzivatel; 
BEGIN
  SELECT COUNT(*) INTO pocet_tym FROM tym;
  SELECT COUNT(*) INTO pocet_projekt FROM projekt;
  pocet_uzivatel := 0;
  OPEN uzivatel_cursor;
  LOOP
    FETCH uzivatel_cursor INTO jmeno_uziv;
    EXIT WHEN uzivatel_cursor%NOTFOUND;
    pocet_uzivatel := pocet_uzivatel + 1;
   
  END LOOP; 
  CLOSE uzivatel_cursor;

  DBMS_OUTPUT.put_line ('Počet týmov:' || pocet_tym ||
                        ' Počet projektov:' || pocet_projekt ||
                        ' Počet uzivatelov:' || pocet_uzivatel
                        );

END;

-- spuštění procedury
EXEC pocet_tym_projekt_uzivatel();


-- #2 ---
-- Procedura vypočítá a vypíše průměrný bodový zisk na studenta v daném projektu
CREATE OR REPLACE PROCEDURE prumerny_pocet_bodu_za_projekt (projektID IN INT)
AS
  celkovy_pocet_bodu NUMBER;
  pocet_studentu_na_projektu NUMBER;
  prumerny_pocet_bodu FLOAT;
BEGIN
    SELECT SUM(BODOVE_HODNOCENI.POCET_BODU) INTO celkovy_pocet_bodu FROM bodove_hodnoceni, PROJEKT WHERE BODOVE_HODNOCENI.ID_PROJEKTU_FK = PROJEKT.ID_PROJEKTU AND bodove_hodnoceni.ID_PROJEKTU_FK = projektID;
    SELECT COUNT(BODOVE_HODNOCENI.XLOGIN_FK) INTO pocet_studentu_na_projektu FROM BODOVE_HODNOCENI, PROJEKT WHERE BODOVE_HODNOCENI.ID_PROJEKTU_FK = PROJEKT.ID_PROJEKTU AND bodove_hodnoceni.ID_PROJEKTU_FK = projektID;
    prumerny_pocet_bodu := celkovy_pocet_bodu / pocet_studentu_na_projektu;
    DBMS_OUTPUT.put_line('Prumerny pocet bodu za projekt ' || projektID || ' je ' || prumerny_pocet_bodu);
    EXCEPTION WHEN ZERO_DIVIDE THEN DBMS_OUTPUT.put_line('Chyba: deleni nulou.');
END;

-- spuštění procedury
EXEC prumerny_pocet_bodu_za_projekt(2);



---------------        explain plan           ----------------

EXPLAIN PLAN FOR 
-- kolik bodů má celkem ze všech předmětů student s xloginem xnovak00?
SELECT SUM(BODOVE_HODNOCENI.POCET_BODU)
FROM STUDENT, BODOVE_HODNOCENI
WHERE BODOVE_HODNOCENI.XLOGIN_FK = STUDENT.XLOGIN AND STUDENT.XLOGIN = 'xnovak00'
GROUP BY STUDENT.XLOGIN;
SELECT plan_table_output FROM TABLE(DBMS_XPLAN.display());

-- Index pro xloginy
CREATE INDEX xlogin_index ON BODOVE_HODNOCENI (XLOGIN_FK);

-- spustíme znova po přidání indexu pro porovnání výkonu:
EXPLAIN PLAN FOR 
-- kolik bodů má celkem ze všech předmětů student s xloginem xnovak00?
SELECT SUM(BODOVE_HODNOCENI.POCET_BODU)
FROM STUDENT, BODOVE_HODNOCENI
WHERE BODOVE_HODNOCENI.XLOGIN_FK = STUDENT.XLOGIN AND STUDENT.XLOGIN = 'xnovak00'
GROUP BY STUDENT.XLOGIN;
SELECT plan_table_output FROM TABLE(DBMS_XPLAN.display());


---------------    definice příst. práv        ----------------

GRANT ALL ON predmet_student TO username2;
GRANT ALL ON predmet_ucitel TO username2;
GRANT ALL ON bodove_hodnoceni TO username2;
GRANT ALL ON tym TO username2;
GRANT ALL ON tema TO username2;
GRANT ALL ON projekt TO username2;
GRANT ALL ON ucitel TO username2;
GRANT ALL ON predmet TO username2;
GRANT ALL ON uzivatel TO username2 WITH GRANT OPTION;
GRANT ALL ON student TO username2 WITH GRANT OPTION;

-- grant na procedury 
GRANT EXECUTE ON pocet_tym_projekt_uzivatel TO username2;
GRANT EXECUTE ON prumerny_pocet_bodu_za_projekt TO username2;

---------------    materialized view            ----------------
-- následující spouští username username2:

CREATE MATERIALIZED VIEW pouze_iff_mat_view
BUILD IMMEDIATE
REFRESH COMPLETE
AS
-- kteri studenti maji zapsany jen predmet IFF?
SELECT s.XLOGIN, u.JMENO, u.PRIJMENI
FROM xfeile00.STUDENT s, xfeile00.UZIVATEL u
WHERE NOT EXISTS ( SELECT * FROM PREDMET_STUDENT WHERE s.XLOGIN = PREDMET_STUDENT.XLOGIN_FK AND ID_PREDMETU_FK<>'IFF') AND s.XLOGIN = u.STUDENT_ID;

-- udeleni pristupu k materialized view kolegovi
GRANT ALL ON pouze_iff_mat_view TO xfeile00;

-- ukazka pouziti:
SELECT * FROM pouze_iff_mat_view;
